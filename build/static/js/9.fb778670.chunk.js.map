{"version":3,"sources":["Frontend/components/IbanChecker/index.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/iban/iban.js"],"names":["IbanChecker","match","useState","iban","setIban","paths","map","key","Component","title","url","cName","exact","path","render","props","crumbs","filter","includes","console","log","className","placeholder","value","IBAN","printFormat","onChange","input","ibanInput","target","length","required","isValid","defaultProps","_arrayLikeToArray","arr","len","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","define","exports","fun","this","t","res","thisArg","arguments","A","charCodeAt","Z","iso13616Prepare","toUpperCase","substr","split","code","join","iso7064Mod97_10","block","remainder","parseInt","parseStructure","structure","regex","format","pattern","repeats","RegExp","electronicFormat","replace","NON_ALPHANUM","Specification","countryCode","example","_regex","_cachedRegex","toBBAN","separator","exec","fromBBAN","bban","isValidBBAN","Error","checkDigit","countries","addSpecification","EVERY_FOUR_CHARS","isString","v","String","countryStructure"],"mappings":"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","file":"static/js/9.fb778670.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport IBAN from 'iban';\nimport { Route, Link } from 'react-router-dom';\nimport Breadcrumbs from '../../Breadcrumbs';\nimport paths from '../../../paths';\n\nconst IbanChecker = ({ match }) => {\n  const [iban, setIban] = useState('');\n  const [isIbanValid, setIsIbanValid] = useState(false);\n\n  let checkIban = (ibanInput) => {\n    if (ibanInput.match(/\\S/g).length < 34) {\n      setIban(ibanInput);\n    }\n  };\n\n  return (\n    <div>\n      {paths.map(({ Component, title, url, cName }, key) => (\n        <>\n          <Route\n            exact\n            path={url}\n            key={key}\n            render={(props) => {\n              const crumbs = paths\n                // Get all routes that contain the current one.\n                .filter(({ url }) => props.match.path.includes(url));\n\n              console.log(`Generated crumbs for ${props.match.path}`);\n              console.log(crumbs);\n              crumbs.map(({ title, url }) => console.log({ title, url }));\n              return (\n                <div className=\"p-8\">\n                  <Breadcrumbs crumbs={crumbs} />\n                </div>\n              );\n            }}\n          />\n        </>\n      ))}\n      <input\n        placeholder=\"write your IBAN\"\n        value={IBAN.printFormat(iban, ' ')}\n        onChange={(input) => checkIban(input.target.value)}\n        required\n      ></input>\n      <h1>{IBAN.isValid(iban) ? 'oh yeah' : 'nope'}</h1>\n    </div>\n  );\n};\n\nIbanChecker.defaultProps = {};\n\nexport default IbanChecker;\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['exports'], factory);\n    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {\n        // CommonJS\n        factory(exports);\n    } else {\n        // Browser globals\n        factory(root.IBAN = {});\n    }\n}(this, function(exports){\n\n    // Array.prototype.map polyfill\n    // code from https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map\n    if (!Array.prototype.map){\n        Array.prototype.map = function(fun /*, thisArg */){\n            \"use strict\";\n\n            if (this === void 0 || this === null)\n                throw new TypeError();\n\n            var t = Object(this);\n            var len = t.length >>> 0;\n            if (typeof fun !== \"function\")\n                throw new TypeError();\n\n            var res = new Array(len);\n            var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n            for (var i = 0; i < len; i++)\n            {\n                // NOTE: Absolute correctness would demand Object.defineProperty\n                //       be used.  But this method is fairly new, and failure is\n                //       possible only if Object.prototype or Array.prototype\n                //       has a property |i| (very unlikely), so use a less-correct\n                //       but more portable alternative.\n                if (i in t)\n                    res[i] = fun.call(thisArg, t[i], i, t);\n            }\n\n            return res;\n        };\n    }\n\n    var A = 'A'.charCodeAt(0),\n        Z = 'Z'.charCodeAt(0);\n\n    /**\n     * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n     * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n     *\n     * @param {string} iban the IBAN\n     * @returns {string} the prepared IBAN\n     */\n    function iso13616Prepare(iban) {\n        iban = iban.toUpperCase();\n        iban = iban.substr(4) + iban.substr(0,4);\n\n        return iban.split('').map(function(n){\n            var code = n.charCodeAt(0);\n            if (code >= A && code <= Z){\n                // A = 10, B = 11, ... Z = 35\n                return code - A + 10;\n            } else {\n                return n;\n            }\n        }).join('');\n    }\n\n    /**\n     * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n     *\n     * @param iban\n     * @returns {number}\n     */\n    function iso7064Mod97_10(iban) {\n        var remainder = iban,\n            block;\n\n        while (remainder.length > 2){\n            block = remainder.slice(0, 9);\n            remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n        }\n\n        return parseInt(remainder, 10) % 97;\n    }\n\n    /**\n     * Parse the BBAN structure used to configure each IBAN Specification and returns a matching regular expression.\n     * A structure is composed of blocks of 3 characters (one letter and 2 digits). Each block represents\n     * a logical group in the typical representation of the BBAN. For each group, the letter indicates which characters\n     * are allowed in this group and the following 2-digits number tells the length of the group.\n     *\n     * @param {string} structure the structure to parse\n     * @returns {RegExp}\n     */\n    function parseStructure(structure){\n        // split in blocks of 3 chars\n        var regex = structure.match(/(.{3})/g).map(function(block){\n\n            // parse each structure block (1-char + 2-digits)\n            var format,\n                pattern = block.slice(0, 1),\n                repeats = parseInt(block.slice(1), 10);\n\n            switch (pattern){\n                case \"A\": format = \"0-9A-Za-z\"; break;\n                case \"B\": format = \"0-9A-Z\"; break;\n                case \"C\": format = \"A-Za-z\"; break;\n                case \"F\": format = \"0-9\"; break;\n                case \"L\": format = \"a-z\"; break;\n                case \"U\": format = \"A-Z\"; break;\n                case \"W\": format = \"0-9a-z\"; break;\n            }\n\n            return '([' + format + ']{' + repeats + '})';\n        });\n\n        return new RegExp('^' + regex.join('') + '$');\n    }\n\n    /**\n     *\n     * @param iban\n     * @returns {string}\n     */\n    function electronicFormat(iban){\n        return iban.replace(NON_ALPHANUM, '').toUpperCase();\n    }\n\n\n    /**\n     * Create a new Specification for a valid IBAN number.\n     *\n     * @param countryCode the code of the country\n     * @param length the length of the IBAN\n     * @param structure the structure of the underlying BBAN (for validation and formatting)\n     * @param example an example valid IBAN\n     * @constructor\n     */\n    function Specification(countryCode, length, structure, example){\n\n        this.countryCode = countryCode;\n        this.length = length;\n        this.structure = structure;\n        this.example = example;\n    }\n\n    /**\n     * Lazy-loaded regex (parse the structure and construct the regular expression the first time we need it for validation)\n     */\n    Specification.prototype._regex = function(){\n        return this._cachedRegex || (this._cachedRegex = parseStructure(this.structure))\n    };\n\n    /**\n     * Check if the passed iban is valid according to this specification.\n     *\n     * @param {String} iban the iban to validate\n     * @returns {boolean} true if valid, false otherwise\n     */\n    Specification.prototype.isValid = function(iban){\n        return this.length == iban.length\n            && this.countryCode === iban.slice(0,2)\n            && this._regex().test(iban.slice(4))\n            && iso7064Mod97_10(iso13616Prepare(iban)) == 1;\n    };\n\n    /**\n     * Convert the passed IBAN to a country-specific BBAN.\n     *\n     * @param iban the IBAN to convert\n     * @param separator the separator to use between BBAN blocks\n     * @returns {string} the BBAN\n     */\n    Specification.prototype.toBBAN = function(iban, separator) {\n        return this._regex().exec(iban.slice(4)).slice(1).join(separator);\n    };\n\n    /**\n     * Convert the passed BBAN to an IBAN for this country specification.\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n     *\n     * @param bban the BBAN to convert to IBAN\n     * @returns {string} the IBAN\n     */\n    Specification.prototype.fromBBAN = function(bban) {\n        if (!this.isValidBBAN(bban)){\n            throw new Error('Invalid BBAN');\n        }\n\n        var remainder = iso7064Mod97_10(iso13616Prepare(this.countryCode + '00' + bban)),\n            checkDigit = ('0' + (98 - remainder)).slice(-2);\n\n        return this.countryCode + checkDigit + bban;\n    };\n\n    /**\n     * Check of the passed BBAN is valid.\n     * This function only checks the format of the BBAN (length and matching the letetr/number specs) but does not\n     * verify the check digit.\n     *\n     * @param bban the BBAN to validate\n     * @returns {boolean} true if the passed bban is a valid BBAN according to this specification, false otherwise\n     */\n    Specification.prototype.isValidBBAN = function(bban) {\n        return this.length - 4 == bban.length\n            && this._regex().test(bban);\n    };\n\n    var countries = {};\n\n    function addSpecification(IBAN){\n        countries[IBAN.countryCode] = IBAN;\n    }\n\n    addSpecification(new Specification(\"AD\", 24, \"F04F04A12\",          \"AD1200012030200359100100\"));\n    addSpecification(new Specification(\"AE\", 23, \"F03F16\",             \"AE070331234567890123456\"));\n    addSpecification(new Specification(\"AL\", 28, \"F08A16\",             \"AL47212110090000000235698741\"));\n    addSpecification(new Specification(\"AT\", 20, \"F05F11\",             \"AT611904300234573201\"));\n    addSpecification(new Specification(\"AZ\", 28, \"U04A20\",             \"AZ21NABZ00000000137010001944\"));\n    addSpecification(new Specification(\"BA\", 20, \"F03F03F08F02\",       \"BA391290079401028494\"));\n    addSpecification(new Specification(\"BE\", 16, \"F03F07F02\",          \"BE68539007547034\"));\n    addSpecification(new Specification(\"BG\", 22, \"U04F04F02A08\",       \"BG80BNBG96611020345678\"));\n    addSpecification(new Specification(\"BH\", 22, \"U04A14\",             \"BH67BMAG00001299123456\"));\n    addSpecification(new Specification(\"BR\", 29, \"F08F05F10U01A01\",    \"BR9700360305000010009795493P1\"));\n    addSpecification(new Specification(\"BY\", 28, \"A04F04A16\",          \"BY13NBRB3600900000002Z00AB00\"));\n    addSpecification(new Specification(\"CH\", 21, \"F05A12\",             \"CH9300762011623852957\"));\n    addSpecification(new Specification(\"CR\", 22, \"F04F14\",             \"CR72012300000171549015\"));\n    addSpecification(new Specification(\"CY\", 28, \"F03F05A16\",          \"CY17002001280000001200527600\"));\n    addSpecification(new Specification(\"CZ\", 24, \"F04F06F10\",          \"CZ6508000000192000145399\"));\n    addSpecification(new Specification(\"DE\", 22, \"F08F10\",             \"DE89370400440532013000\"));\n    addSpecification(new Specification(\"DK\", 18, \"F04F09F01\",          \"DK5000400440116243\"));\n    addSpecification(new Specification(\"DO\", 28, \"U04F20\",             \"DO28BAGR00000001212453611324\"));\n    addSpecification(new Specification(\"EE\", 20, \"F02F02F11F01\",       \"EE382200221020145685\"));\n    addSpecification(new Specification(\"EG\", 29, \"F04F04F17\",          \"EG800002000156789012345180002\"));\n    addSpecification(new Specification(\"ES\", 24, \"F04F04F01F01F10\",    \"ES9121000418450200051332\"));\n    addSpecification(new Specification(\"FI\", 18, \"F06F07F01\",          \"FI2112345600000785\"));\n    addSpecification(new Specification(\"FO\", 18, \"F04F09F01\",          \"FO6264600001631634\"));\n    addSpecification(new Specification(\"FR\", 27, \"F05F05A11F02\",       \"FR1420041010050500013M02606\"));\n    addSpecification(new Specification(\"GB\", 22, \"U04F06F08\",          \"GB29NWBK60161331926819\"));\n    addSpecification(new Specification(\"GE\", 22, \"U02F16\",             \"GE29NB0000000101904917\"));\n    addSpecification(new Specification(\"GI\", 23, \"U04A15\",             \"GI75NWBK000000007099453\"));\n    addSpecification(new Specification(\"GL\", 18, \"F04F09F01\",          \"GL8964710001000206\"));\n    addSpecification(new Specification(\"GR\", 27, \"F03F04A16\",          \"GR1601101250000000012300695\"));\n    addSpecification(new Specification(\"GT\", 28, \"A04A20\",             \"GT82TRAJ01020000001210029690\"));\n    addSpecification(new Specification(\"HR\", 21, \"F07F10\",             \"HR1210010051863000160\"));\n    addSpecification(new Specification(\"HU\", 28, \"F03F04F01F15F01\",    \"HU42117730161111101800000000\"));\n    addSpecification(new Specification(\"IE\", 22, \"U04F06F08\",          \"IE29AIBK93115212345678\"));\n    addSpecification(new Specification(\"IL\", 23, \"F03F03F13\",          \"IL620108000000099999999\"));\n    addSpecification(new Specification(\"IS\", 26, \"F04F02F06F10\",       \"IS140159260076545510730339\"));\n    addSpecification(new Specification(\"IT\", 27, \"U01F05F05A12\",       \"IT60X0542811101000000123456\"));\n    addSpecification(new Specification(\"IQ\", 23, \"U04F03A12\",          \"IQ98NBIQ850123456789012\"));\n    addSpecification(new Specification(\"JO\", 30, \"A04F22\",             \"JO15AAAA1234567890123456789012\"));\n    addSpecification(new Specification(\"KW\", 30, \"U04A22\",             \"KW81CBKU0000000000001234560101\"));\n    addSpecification(new Specification(\"KZ\", 20, \"F03A13\",             \"KZ86125KZT5004100100\"));\n    addSpecification(new Specification(\"LB\", 28, \"F04A20\",             \"LB62099900000001001901229114\"));\n    addSpecification(new Specification(\"LC\", 32, \"U04F24\",             \"LC07HEMM000100010012001200013015\"));\n    addSpecification(new Specification(\"LI\", 21, \"F05A12\",             \"LI21088100002324013AA\"));\n    addSpecification(new Specification(\"LT\", 20, \"F05F11\",             \"LT121000011101001000\"));\n    addSpecification(new Specification(\"LU\", 20, \"F03A13\",             \"LU280019400644750000\"));\n    addSpecification(new Specification(\"LV\", 21, \"U04A13\",             \"LV80BANK0000435195001\"));\n    addSpecification(new Specification(\"MC\", 27, \"F05F05A11F02\",       \"MC5811222000010123456789030\"));\n    addSpecification(new Specification(\"MD\", 24, \"U02A18\",             \"MD24AG000225100013104168\"));\n    addSpecification(new Specification(\"ME\", 22, \"F03F13F02\",          \"ME25505000012345678951\"));\n    addSpecification(new Specification(\"MK\", 19, \"F03A10F02\",          \"MK07250120000058984\"));\n    addSpecification(new Specification(\"MR\", 27, \"F05F05F11F02\",       \"MR1300020001010000123456753\"));\n    addSpecification(new Specification(\"MT\", 31, \"U04F05A18\",          \"MT84MALT011000012345MTLCAST001S\"));\n    addSpecification(new Specification(\"MU\", 30, \"U04F02F02F12F03U03\", \"MU17BOMM0101101030300200000MUR\"));\n    addSpecification(new Specification(\"NL\", 18, \"U04F10\",             \"NL91ABNA0417164300\"));\n    addSpecification(new Specification(\"NO\", 15, \"F04F06F01\",          \"NO9386011117947\"));\n    addSpecification(new Specification(\"PK\", 24, \"U04A16\",             \"PK36SCBL0000001123456702\"));\n    addSpecification(new Specification(\"PL\", 28, \"F08F16\",             \"PL61109010140000071219812874\"));\n    addSpecification(new Specification(\"PS\", 29, \"U04A21\",             \"PS92PALS000000000400123456702\"));\n    addSpecification(new Specification(\"PT\", 25, \"F04F04F11F02\",       \"PT50000201231234567890154\"));\n    addSpecification(new Specification(\"QA\", 29, \"U04A21\",             \"QA30AAAA123456789012345678901\"));\n    addSpecification(new Specification(\"RO\", 24, \"U04A16\",             \"RO49AAAA1B31007593840000\"));\n    addSpecification(new Specification(\"RS\", 22, \"F03F13F02\",          \"RS35260005601001611379\"));\n    addSpecification(new Specification(\"SA\", 24, \"F02A18\",             \"SA0380000000608010167519\"));\n    addSpecification(new Specification(\"SC\", 31, \"U04F04F16U03\",       \"SC18SSCB11010000000000001497USD\"));\n    addSpecification(new Specification(\"SE\", 24, \"F03F16F01\",          \"SE4550000000058398257466\"));\n    addSpecification(new Specification(\"SI\", 19, \"F05F08F02\",          \"SI56263300012039086\"));\n    addSpecification(new Specification(\"SK\", 24, \"F04F06F10\",          \"SK3112000000198742637541\"));\n    addSpecification(new Specification(\"SM\", 27, \"U01F05F05A12\",       \"SM86U0322509800000000270100\"));\n    addSpecification(new Specification(\"ST\", 25, \"F08F11F02\",          \"ST68000100010051845310112\"));\n    addSpecification(new Specification(\"SV\", 28, \"U04F20\",             \"SV62CENR00000000000000700025\"));\n    addSpecification(new Specification(\"TL\", 23, \"F03F14F02\",          \"TL380080012345678910157\"));\n    addSpecification(new Specification(\"TN\", 24, \"F02F03F13F02\",       \"TN5910006035183598478831\"));\n    addSpecification(new Specification(\"TR\", 26, \"F05F01A16\",          \"TR330006100519786457841326\"));\n    addSpecification(new Specification(\"UA\", 29, \"F25\",                \"UA511234567890123456789012345\"));\n    addSpecification(new Specification(\"VA\", 22, \"F18\",                \"VA59001123000012345678\"));\n    addSpecification(new Specification(\"VG\", 24, \"U04F16\",             \"VG96VPVG0000012345678901\"));\n    addSpecification(new Specification(\"XK\", 20, \"F04F10F02\",          \"XK051212012345678906\"));\n\n\n    // The following countries are not included in the official IBAN registry but use the IBAN specification\n\n    // Angola\n    addSpecification(new Specification(\"AO\", 25, \"F21\",                \"AO69123456789012345678901\"));\n    // Burkina\n    addSpecification(new Specification(\"BF\", 27, \"F23\",                \"BF2312345678901234567890123\"));\n    // Burundi\n    addSpecification(new Specification(\"BI\", 16, \"F12\",                \"BI41123456789012\"));\n    // Benin\n    addSpecification(new Specification(\"BJ\", 28, \"F24\",                \"BJ39123456789012345678901234\"));\n    // Ivory\n    addSpecification(new Specification(\"CI\", 28, \"U02F22\",             \"CI70CI1234567890123456789012\"));\n    // Cameron\n    addSpecification(new Specification(\"CM\", 27, \"F23\",                \"CM9012345678901234567890123\"));\n    // Cape Verde\n    addSpecification(new Specification(\"CV\", 25, \"F21\",                \"CV30123456789012345678901\"));\n    // Algeria\n    addSpecification(new Specification(\"DZ\", 24, \"F20\",                \"DZ8612345678901234567890\"));\n    // Iran\n    addSpecification(new Specification(\"IR\", 26, \"F22\",                \"IR861234568790123456789012\"));\n    // Madagascar\n    addSpecification(new Specification(\"MG\", 27, \"F23\",                \"MG1812345678901234567890123\"));\n    // Mali\n    addSpecification(new Specification(\"ML\", 28, \"U01F23\",             \"ML15A12345678901234567890123\"));\n    // Mozambique\n    addSpecification(new Specification(\"MZ\", 25, \"F21\",                \"MZ25123456789012345678901\"));\n    // Senegal\n    addSpecification(new Specification(\"SN\", 28, \"U01F23\",             \"SN52A12345678901234567890123\"));\n\n    // The following are regional and administrative French Republic subdivision IBAN specification (same structure as FR, only country code vary)\n    addSpecification(new Specification(\"GF\", 27, \"F05F05A11F02\",       \"GF121234512345123456789AB13\"));\n    addSpecification(new Specification(\"GP\", 27, \"F05F05A11F02\",       \"GP791234512345123456789AB13\"));\n    addSpecification(new Specification(\"MQ\", 27, \"F05F05A11F02\",       \"MQ221234512345123456789AB13\"));\n    addSpecification(new Specification(\"RE\", 27, \"F05F05A11F02\",       \"RE131234512345123456789AB13\"));\n    addSpecification(new Specification(\"PF\", 27, \"F05F05A11F02\",       \"PF281234512345123456789AB13\"));\n    addSpecification(new Specification(\"TF\", 27, \"F05F05A11F02\",       \"TF891234512345123456789AB13\"));\n    addSpecification(new Specification(\"YT\", 27, \"F05F05A11F02\",       \"YT021234512345123456789AB13\"));\n    addSpecification(new Specification(\"NC\", 27, \"F05F05A11F02\",       \"NC551234512345123456789AB13\"));\n    addSpecification(new Specification(\"BL\", 27, \"F05F05A11F02\",       \"BL391234512345123456789AB13\"));\n    addSpecification(new Specification(\"MF\", 27, \"F05F05A11F02\",       \"MF551234512345123456789AB13\"));\n    addSpecification(new Specification(\"PM\", 27, \"F05F05A11F02\",       \"PM071234512345123456789AB13\"));\n    addSpecification(new Specification(\"WF\", 27, \"F05F05A11F02\",       \"WF621234512345123456789AB13\"));\n\n    var NON_ALPHANUM = /[^a-zA-Z0-9]/g,\n        EVERY_FOUR_CHARS =/(.{4})(?!$)/g;\n\n    /**\n     * Utility function to check if a variable is a String.\n     *\n     * @param v\n     * @returns {boolean} true if the passed variable is a String, false otherwise.\n     */\n    function isString(v){\n        return (typeof v == 'string' || v instanceof String);\n    }\n\n    /**\n     * Check if an IBAN is valid.\n     *\n     * @param {String} iban the IBAN to validate.\n     * @returns {boolean} true if the passed IBAN is valid, false otherwise\n     */\n    exports.isValid = function(iban){\n        if (!isString(iban)){\n            return false;\n        }\n        iban = electronicFormat(iban);\n        var countryStructure = countries[iban.slice(0,2)];\n        return !!countryStructure && countryStructure.isValid(iban);\n    };\n\n    /**\n     * Convert an IBAN to a BBAN.\n     *\n     * @param iban\n     * @param {String} [separator] the separator to use between the blocks of the BBAN, defaults to ' '\n     * @returns {string|*}\n     */\n    exports.toBBAN = function(iban, separator){\n        if (typeof separator == 'undefined'){\n            separator = ' ';\n        }\n        iban = electronicFormat(iban);\n        var countryStructure = countries[iban.slice(0,2)];\n        if (!countryStructure) {\n            throw new Error('No country with code ' + iban.slice(0,2));\n        }\n        return countryStructure.toBBAN(iban, separator);\n    };\n\n    /**\n     * Convert the passed BBAN to an IBAN for this country specification.\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n     *\n     * @param countryCode the country of the BBAN\n     * @param bban the BBAN to convert to IBAN\n     * @returns {string} the IBAN\n     */\n    exports.fromBBAN = function(countryCode, bban){\n        var countryStructure = countries[countryCode];\n        if (!countryStructure) {\n            throw new Error('No country with code ' + countryCode);\n        }\n        return countryStructure.fromBBAN(electronicFormat(bban));\n    };\n\n    /**\n     * Check the validity of the passed BBAN.\n     *\n     * @param countryCode the country of the BBAN\n     * @param bban the BBAN to check the validity of\n     */\n    exports.isValidBBAN = function(countryCode, bban){\n        if (!isString(bban)){\n            return false;\n        }\n        var countryStructure = countries[countryCode];\n        return countryStructure && countryStructure.isValidBBAN(electronicFormat(bban));\n    };\n\n    /**\n     *\n     * @param iban\n     * @param separator\n     * @returns {string}\n     */\n    exports.printFormat = function(iban, separator){\n        if (typeof separator == 'undefined'){\n            separator = ' ';\n        }\n        return electronicFormat(iban).replace(EVERY_FOUR_CHARS, \"$1\" + separator);\n    };\n\n    exports.electronicFormat = electronicFormat;\n    /**\n     * An object containing all the known IBAN specifications.\n     */\n    exports.countries = countries;\n\n}));\n"],"sourceRoot":""}